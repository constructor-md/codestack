[{"id":0,"href":"/codestack/docs/basic/","title":"计算机基础","section":"Docs","content":"\r计算机基础\r#\r"},{"id":1,"href":"/codestack/docs/javaee/","title":"JavaEE","section":"Docs","content":"\rJavaEE\r#\r"},{"id":2,"href":"/codestack/docs/javaee/spring/ioc/","title":"IOC","section":"Spring","content":"\rIOC\r#\r"},{"id":3,"href":"/codestack/docs/javaee/spring/","title":"Spring","section":"JavaEE","content":"\rSpring\r#\r"},{"id":4,"href":"/codestack/docs/basic/net/transport/tcp/","title":"TCP","section":"传输层","content":"\rTCP\r#\r三次握手和四次挥手\r#\rTCP协议建立连接时，进行三次握手：\n客户端向服务端发送SYN，同步序列号 服务端接收到SYN后，返回SYN，内容为自己的同步序列号；ACK，内容为对方的同步序列号+1 客户端收到SYN、ACK后，再给服务端发送一个ACK为服务端同步序列号+1，自己的同步序列号+1 断开TCP连接时，进行四次挥手：\n客户端向服务端发送FIN \u0026ndash; 我要断开了 服务端收到FIN，向客户端发送ACK \u0026ndash; 知道了，你可以不发送数据，但我这还有数据要处理 服务端处理完数据，向客户端发送FIN，表示服务端可以断开连接 客户端收到服务端FIN，给服务端发送ACK，表示客户端也将断开连接 为什么是三次握手？\n防止重复链接。防止旧的重复连接引起连接混乱。 网络复杂或状况差的情况下，发送方可能发起多个连接建立的请求。如果只有两次握手，接收方只能选择接受或拒绝，但无法确定该次请求是否正常。 如果是三次握手，客户端接受服务端返回的内容，可以判断当前连接是否是历史连接，是历史连接则发送终止报文。不是则返回内容建立连接 客户端可以检验服务端收到的连接请求是否是当前的 同步初始化序列号 TCP的重要特征是可靠性，它使用一个序列号来保证自己在不稳定的网络环境来构建稳定的数据连接，序列号的u哦用时方知数据包重复发送，解决数据包接收的顺序颠倒问题。 建立TCP连接时需要发送同步初始化一个序列号来保证稳定性。第一步发送一个初始序列号，第二部检验初始序列号是否被服务端成功接收，第三步再发送一个ACK报告成功，则两边拥有一个可靠的初始序列号。 为什么是四次挥手？\nTCP是全双工通信的。第一次挥手仅代表客户端不会再发送数据报文，不代表客户端不会接收 第二次挥手，服务端可能还有数据报文要发送。只能回复一个知道你想断开的消息，但是不会立马认为连接断开。 第三次挥手，服务端处理完要发送的报文，发送给客户端结束报文。这样保证了数据通信正常完成。 第四次挥手，如果主动方发送了ACK确认连接中断，被动方可以释放连接。意味着刚才数据已经被收到，最后一次工作结束。 "},{"id":5,"href":"/codestack/docs/basic/net/transport/","title":"传输层","section":"计算机网络","content":"\r传输层 Transport Layer\r#\r"},{"id":6,"href":"/codestack/docs/basic/net/","title":"计算机网络","section":"计算机基础","content":"\r计算机网络\r#\r"}]