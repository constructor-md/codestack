<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>传输层 on CodeStack</title>
    <link>http://localhost:1313/codestack/docs/basic/net/transport/</link>
    <description>Recent content in 传输层 on CodeStack</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <atom:link href="http://localhost:1313/codestack/docs/basic/net/transport/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP</title>
      <link>http://localhost:1313/codestack/docs/basic/net/transport/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/codestack/docs/basic/net/transport/tcp/</guid>
      <description>&lt;h1 id=&#34;tcp&#34;&gt;&#xD;&#xA;  TCP&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tcp&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议&lt;/p&gt;&#xA;&lt;h2 id=&#34;报文结构&#34;&gt;&#xD;&#xA;  报文结构&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8a%a5%e6%96%87%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;&lt;img src=&#34;./images/message.png&#34; alt=&#34;报文结构&#34; title=&#34;报文结构&#34;/&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;源端口：发送方使用的端口号，16位&lt;/li&gt;&#xA;&lt;li&gt;目的端口：接收方使用的端口号，16位&lt;/li&gt;&#xA;&lt;li&gt;序号：本报文段发送数据的第一个字节的编号，32位&lt;/li&gt;&#xA;&lt;li&gt;确认号：接收方期望接收到的下一个报文段的第一个字节的编号&lt;/li&gt;&#xA;&lt;li&gt;数据偏移(首部长度)：指数据段中的数据部分的起始处距离TCP报文段起始处的偏移量，也就是TCP报文的报头部分的长度，接收端根据这个知道数据（有效载荷）从何处开始 4位&lt;/li&gt;&#xA;&lt;li&gt;保留字段：TCP协议将来的发展预留的空间，目前必须全部为0，6位&lt;/li&gt;&#xA;&lt;li&gt;标志位字段：共六个标志位，每个1bit&lt;/li&gt;&#xA;&lt;li&gt;窗口大小：表示发送该TCP报文的接收窗口还可以接受多少字节的数据量，用于TCP的流量控制，16位&lt;/li&gt;&#xA;&lt;li&gt;校验和：用于确认传输的数据有无损坏。发送端基于数据内容校验生成一个数值，接收端同样生成一个数值进行对比，相同的数据有效，反之无效则丢弃数据包，16位&lt;/li&gt;&#xA;&lt;li&gt;紧急指针：仅当标志位的URG字段值位1才有意义。指出有效载荷中位紧急数据的字节数。当所有紧急数据处理完，TCP告知应用程序恢复到正常操作。即使接收方窗口大小为0，也可以发送紧急数据，因为紧急数据无需缓存，16位&lt;/li&gt;&#xA;&lt;li&gt;选项字段：长度不定，但是必须是32bit的整数倍，即4字节的整数倍。内容可变，所以使用首部长度来区分选项部分的具体长度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;如何分离首部和载荷确认首部长度&#34;&gt;&#xD;&#xA;  如何分离首部和载荷（确认首部长度）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e4%bd%95%e5%88%86%e7%a6%bb%e9%a6%96%e9%83%a8%e5%92%8c%e8%bd%bd%e8%8d%b7%e7%a1%ae%e8%ae%a4%e9%a6%96%e9%83%a8%e9%95%bf%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;TCP固定首部长度20字节，以及选项字段&#xA;首部长度字段为4bits，最大可表示长度为1111，即15。表示单位是4字节&#xA;所以TCP首部最长是15*4 = 60字节&#xA;固定首部为20字节，选项部分为4字节的倍数，最大为40字节&#xA;这说明了数据偏移字段标识首部长度的原理&#xA;根据首部长度，可以分离首部和载荷&lt;/p&gt;&#xA;&lt;h2 id=&#34;连接的建立和断开&#34;&gt;&#xD;&#xA;  连接的建立和断开&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e7%9a%84%e5%bb%ba%e7%ab%8b%e5%92%8c%e6%96%ad%e5%bc%80&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;TCP连接是TCP协议在网络中建立的可靠通信链路&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这种可靠指的是不丢包，就是网络不太好的情况下可以尽量保证数据的完整接收（发送确认和重发）&lt;/p&gt;&#xA;&lt;p&gt;由IP协议锚定双方地址，由底层协议传输数据包，由高层协议进行数据的加解密&lt;/p&gt;&#xA;&lt;p&gt;换言之，TCP的可靠通信链路中保证的是传输和接收数据包的完整性，而不是包揽了链路的实际构建、数据包防伪等过程。不要把可靠性的理解在TCP扩展太多&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;为什么要建立连接&#34;&gt;&#xD;&#xA;  为什么要建立连接&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e5%bb%ba%e7%ab%8b%e8%bf%9e%e6%8e%a5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;可靠性验证：建立连接的过程实际就是通信双方验证各自的发送和接受能力是否正常，双方的信道是否通畅&lt;/li&gt;&#xA;&lt;li&gt;协商参数：如序号初始值，MSS，是否启用SACK等&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;连接的建立---三次握手&#34;&gt;&#xD;&#xA;  连接的建立 - 三次握手&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9e%e6%8e%a5%e7%9a%84%e5%bb%ba%e7%ab%8b---%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;服务器初始化状态&#xA;服务器端进程函数顺序：socket =&amp;gt; bind =&amp;gt; listen =&amp;gt; accept&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;socket()创建套接字listenfd&lt;/li&gt;&#xA;&lt;li&gt;bind()将套接字和端口绑定&lt;/li&gt;&#xA;&lt;li&gt;listen()让listenfd成为监听套接字，后续连接通过监听套接字获取，服务器处于监听状态&lt;/li&gt;&#xA;&lt;li&gt;accept()进程阻塞，直到有客户连接请求到达才返回&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;客户端发起连接请求 - 第一次握手&#xA;客户端进程函数顺序:socket =&amp;gt; connect&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;socket()创建套接字&lt;/li&gt;&#xA;&lt;li&gt;connect()调用时操作系统自动bind()，然后客户端进程就会向服务端进行发送连接请求报文&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;连接请求报文首部的标志位SYN=1&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
