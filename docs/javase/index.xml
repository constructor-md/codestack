<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaSE on CodeStack</title>
    <link>https://constructor-md.github.io/codestack/docs/javase/</link>
    <description>Recent content in JavaSE on CodeStack</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <atom:link href="https://constructor-md.github.io/codestack/docs/javase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>异常体系</title>
      <link>https://constructor-md.github.io/codestack/docs/javase/exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://constructor-md.github.io/codestack/docs/javase/exception/</guid>
      <description>&lt;h1 id=&#34;异常体系&#34;&gt;&#xD;&#xA;  异常体系&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%82%e5%b8%b8%e4%bd%93%e7%b3%bb&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;throwable&#34;&gt;&#xD;&#xA;  Throwable&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#throwable&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Throwable 类是所有异常和错误的超类&lt;br&gt;&#xA;两个直接子类为 Error 和 Exception，分别表示错误和异常&lt;/p&gt;&#xA;&lt;h2 id=&#34;error&#34;&gt;&#xD;&#xA;  Error&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#error&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Error 指的是程序无法处理的错误，由 JVM 产生和抛出&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如 OutOfMemoryError、StackOverFlowError、ThreadDeath 等。Error 发生时，JVM 会选择终止线程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;exception&#34;&gt;&#xD;&#xA;  Exception&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#exception&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;分为不检查异常（unchecked Exception）和检查异常（checked exception）&lt;br&gt;&#xA;也是运行时异常（RuntimeException）和非运行时异常&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Exception 是程序可以处理的异常，分为两大类，运行时异常和非运行时异常。程序中需要尽量去解决这些异常&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;运行时异常&#34;&gt;&#xD;&#xA;  运行时异常&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e6%97%b6%e5%bc%82%e5%b8%b8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;指 RuntimeException 类及其子类，如 NullPointerException、IndexOutOfBoundsException 等。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;属于不检查异常，程序可以选择捕获处理，也可以不处理&#xA;例如：&lt;/li&gt;&#xA;&lt;li&gt;NullPointerException - 空指针引用异常&lt;/li&gt;&#xA;&lt;li&gt;ClassCastException - 类型强制转换异常&lt;/li&gt;&#xA;&lt;li&gt;IllegalArgumentException - 传递非法参数异常&lt;/li&gt;&#xA;&lt;li&gt;ArithmeticException - 算术运算异常&lt;/li&gt;&#xA;&lt;li&gt;ArrayStoreException - 向数组中存放与声明类型不兼容对象异常&lt;/li&gt;&#xA;&lt;li&gt;IndexOutOfBoundsException - 下标越界异常&lt;/li&gt;&#xA;&lt;li&gt;NegativeArraySizeException - 创建一个大小为负数的数组错误异常&lt;/li&gt;&#xA;&lt;li&gt;NumberFormatException - 数字格式异常&lt;/li&gt;&#xA;&lt;li&gt;SecurityException - 安全异常&lt;/li&gt;&#xA;&lt;li&gt;UnsupportedOperationException - 不支持的操作异常&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;非运行时异常&#34;&gt;&#xD;&#xA;  非运行时异常&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%9e%e8%bf%90%e8%a1%8c%e6%97%b6%e5%bc%82%e5%b8%b8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;指 Exception 类及其子类中 RuntimeException 类及其子类以外的类&lt;/p&gt;</description>
    </item>
    <item>
      <title>JDK|JRE|JVM</title>
      <link>https://constructor-md.github.io/codestack/docs/javase/java-softwre-package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://constructor-md.github.io/codestack/docs/javase/java-softwre-package/</guid>
      <description>&lt;h1 id=&#34;jdkjrejvm&#34;&gt;&#xD;&#xA;  JDK|JRE|JVM&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jdkjrejvm&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;jvm&#34;&gt;&#xD;&#xA;  JVM：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jvm&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Java 虚拟机，Java 程序能够跨平台运行的核心&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;所有的 Java 程序都会被编译为.class 的类文件，同代码在任何平台上编译字节码都相同&lt;/li&gt;&#xA;&lt;li&gt;.class 文件在虚拟机上运行，由虚拟机将字节码解释给本地系统执行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;jre&#34;&gt;&#xD;&#xA;  JRE：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jre&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Java 运行时环境，即 Java 程序必须在 JRE 上运行&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包含 JVM 和 Java 核心类库&lt;/li&gt;&#xA;&lt;li&gt;JVM 不能直接执行 class，还需要 Java 核心类库来解释 class&lt;/li&gt;&#xA;&lt;li&gt;安装 jre 后有 bin 和 lib 两个文件夹，可简单理解为分别是 JVM 和 Lib&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;jdk&#34;&gt;&#xD;&#xA;  JDK：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#jdk&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Java 开发工具包，包括 JRE、Java 工具、编译器和调试器组成&lt;br&gt;&#xA;自带工具：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;java：Java 运行工具，运行.class 或 jar 包&lt;/li&gt;&#xA;&lt;li&gt;javac: Java 编译工具，将 Java 源代码编译为字节码&lt;/li&gt;&#xA;&lt;li&gt;javap: Java 反编译工具，将 Java 字节码反汇编为源代码&lt;/li&gt;&#xA;&lt;li&gt;jmap：Java 内存映射工具，打印执行 Java 进程、核心文件或远程调试服务器的配置信息&lt;/li&gt;&#xA;&lt;li&gt;jps: Java 进程状态工具，显示目标系统上的 HotSpot JVM 的 Java 进程信息&lt;/li&gt;&#xA;&lt;li&gt;jinfo: Java 配置信息工具，用于打印指定 Java 进程、核心文件或远程调试服务器的配置信息&lt;/li&gt;&#xA;&lt;li&gt;jstack: Java 堆栈跟踪工具，用于打印 Java 进程、核心为念 u 哦远程调试服务器的 Java 现成的堆栈跟踪信息&lt;/li&gt;&#xA;&lt;li&gt;jvisualvm: Java 可视化 JVM 检测、故障分析工具。图形化界面提供指定虚拟机的 Java 应用程序的详细信息&lt;/li&gt;&#xA;&lt;li&gt;jconsole：图形化界面的检测工具，监测并显示 Java 平台上的应用程序的性能和资源占用等信息&lt;/li&gt;&#xA;&lt;li&gt;javadoc: Java 文档工具，根据源代码中的注释信息生成 HTML 格式的 API 帮助文档&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;三者的关系&#34;&gt;&#xD;&#xA;  三者的关系：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e8%80%85%e7%9a%84%e5%85%b3%e7%b3%bb&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JDK 包含 JRE、JRE 包含 JVM&lt;/li&gt;&#xA;&lt;li&gt;JVM 不能单独搞定 class 的执行，解释 class 需要使用 JRE 中的 Java 核心类库 lib&lt;/li&gt;&#xA;&lt;li&gt;我们利用 JDK 开发 Java 源程序，通过 JDK 提供的 javac 编译程序将源程序编译成 Java 字节码，在 JVM 使用 JRE 的 lib 解释这些字节码，映射到 CPU 指令集或 OS 的系统调用&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
