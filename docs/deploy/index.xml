<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>部署 on CodeStack</title>
    <link>https://constructor-md.github.io/codestack/docs/deploy/</link>
    <description>Recent content in 部署 on CodeStack</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <atom:link href="https://constructor-md.github.io/codestack/docs/deploy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ubuntu</title>
      <link>https://constructor-md.github.io/codestack/docs/deploy/ubuntu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://constructor-md.github.io/codestack/docs/deploy/ubuntu/</guid>
      <description>&lt;h1 id=&#34;ubuntu&#34;&gt;&#xD;&#xA;  Ubuntu&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ubuntu&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;采用版本：24.01&lt;/p&gt;&#xA;&lt;p&gt;安装过程：全部 Done&lt;/p&gt;&#xA;&lt;h2 id=&#34;非root用户上传文件&#34;&gt;&#xD;&#xA;  非Root用户上传文件&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%9eroot%e7%94%a8%e6%88%b7%e4%b8%8a%e4%bc%a0%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 赋予指定用户组用户在某个文件夹及其子文件夹上传文件的权限&#xD;&#xA; sudo chown -R quanta:quanta /DATA&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;时区设置&#34;&gt;&#xD;&#xA;  时区设置&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e5%8c%ba%e8%ae%be%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查看当前时区&#xD;&#xA;timedatectl&#xD;&#xA;# 查看东八区全称&#xD;&#xA;timedatectl list-timezones | grep Shanghai&#xD;&#xA;# 设置时区&#xD;&#xA;sudo timedatectl set-timezone Asia/Shanghai&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;host设置&#34;&gt;&#xD;&#xA;  host设置&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#host%e8%ae%be%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;便于多主机内网互相访问&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vim /etc/hosts&#xD;&#xA;&#xD;&#xA;# 补充相关机器的ip 主机名&#xD;&#xA;192.168.1.11 dataserver1&#xD;&#xA;192.168.1.12 dataserver2&#xD;&#xA;192.168.1.13 dataserver3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;openssh安装&#34;&gt;&#xD;&#xA;  OpenSSH安装&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#openssh%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&#xD;&#xA;sudo apt install openssh-server&#xD;&#xA;service ssh status&#xD;&#xA;# 随后可以本机SSH使用安装过程设置的账户密码登录服务器&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改监听端口&#34;&gt;&#xD;&#xA;  修改监听端口&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bf%ae%e6%94%b9%e7%9b%91%e5%90%ac%e7%ab%af%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vi /etc/ssh/sshd_config&#xD;&#xA;# 内容&#xD;&#xA;Port 2222&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改后要重启&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL</title>
      <link>https://constructor-md.github.io/codestack/docs/deploy/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://constructor-md.github.io/codestack/docs/deploy/mysql/</guid>
      <description>&lt;h1 id=&#34;mysql&#34;&gt;&#xD;&#xA;  MySQL&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;安装版本：MySQL 8.0.20&lt;/p&gt;&#xA;&lt;p&gt;部署方式：一主二从&lt;/p&gt;&#xA;&lt;p&gt;运行方式：docker-compose&lt;/p&gt;&#xA;&lt;h2 id=&#34;各节点安装&#34;&gt;&#xD;&#xA;  各节点安装&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%84%e8%8a%82%e7%82%b9%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;创建mysql目录&#34;&gt;&#xD;&#xA;  创建MySQL目录&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%9b%e5%bb%bamysql%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 放置所有mysql相关文件 比如my.cnf&#xD;&#xA;sudo mkdir /DATA/mysql&#xD;&#xA;# 放置mysql数据文件 也作为mysql&#xD;&#xA;sudo mkdir /DATA/mysql/mysql&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建mysql用户并设置权限&#34;&gt;&#xD;&#xA;  创建MySQL用户并设置权限&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%9b%e5%bb%bamysql%e7%94%a8%e6%88%b7%e5%b9%b6%e8%ae%be%e7%bd%ae%e6%9d%83%e9%99%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 创建mysql用户 设置为不可登陆系统 并设置用户的主目录为/DATA/mysql/mysql&#xD;&#xA;sudo useradd -r -s /sbin/nologin -d /DATA/mysql/mysql mysql&#xD;&#xA;# 指定mysql用户的主目录为/DATA/mysql/mysql&#xD;&#xA;sudo usermod -d /DATA/mysql/mysql mysql&#xD;&#xA;# 递归地将/DATA/mysql/mysql目录及其所有子目录和文件的所有者和所属组设置为mysql用户和mysql组&#xD;&#xA;sudo chown -R mysql:mysql /DATA/mysql/mysql&#xD;&#xA;# 递归地将/DATA/mysql/mysql目录及其子目录设和文件的权限设置为755&#xD;&#xA;# 755：所有者有读写和执行权限，组用户和其他用户有读和执行权限&#xD;&#xA;sudo chmod -R 755 /DATA/mysql/mysql&#xD;&#xA;# 查找/etc/passwd文件中包含mysql的行 /etc/passwd是系统用户信息文件，包含所有用户的基本信息&#xD;&#xA;grep mysql /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;操作失误时的可选操作&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 删除用户及其主目录 没有r不删除主目录&#xD;&#xA;sudo userdel -r mysql&#xD;&#xA;# 手动删除主目录&#xD;&#xA;sudo rm -rf /DATA/mysql&#xD;&#xA;# 检查 &#xD;&#xA;grep mysql /etc/passwd&#xD;&#xA;# 删除用户组&#xD;&#xA;sudo groupdel mysql&#xD;&#xA;# 检查用户组是否删除&#xD;&#xA;grep mysql /etc/group&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;docker-compose文件&#34;&gt;&#xD;&#xA;  docker-compose文件&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-compose%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 创建docker-compose文件在/DATA下，或者追加在已有文件中&#xD;&#xA;vim docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;docker-compose.yml&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis</title>
      <link>https://constructor-md.github.io/codestack/docs/deploy/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://constructor-md.github.io/codestack/docs/deploy/redis/</guid>
      <description>&lt;h1 id=&#34;redis&#34;&gt;&#xD;&#xA;  Redis&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;安装版本：7.0.4&lt;/p&gt;&#xA;&lt;p&gt;部署方式：一主二从三哨兵&lt;/p&gt;&#xA;&lt;p&gt;节点分配：每节点一个Redis-Server，一个Sentinel&lt;/p&gt;&#xA;&lt;p&gt;运行方式：docker-compose&lt;/p&gt;&#xA;&lt;h2 id=&#34;目录和用户权限&#34;&gt;&#xD;&#xA;  目录和用户权限&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%ae%e5%bd%95%e5%92%8c%e7%94%a8%e6%88%b7%e6%9d%83%e9%99%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;创建redis和sentinel目录&#34;&gt;&#xD;&#xA;  创建Redis和Sentinel目录&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%9b%e5%bb%baredis%e5%92%8csentinel%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 存放所有Redis相关文件&#xD;&#xA;sudo mkdir /DATA/redis&#xD;&#xA;# 存放Redis和Sentinel配置文件&#xD;&#xA;sudo mkdir /DATA/redis/config&#xD;&#xA;# 存放Sentinel配置和文件&#xD;&#xA;sudo mkdir /DATA/redis/config/sentinel&#xD;&#xA;# 存放挂载docker内运行Redis的数据目录&#xD;&#xA;sudo mkdir /DATA/redis/data&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建redis用户并设置工作目录&#34;&gt;&#xD;&#xA;  创建redis用户并设置工作目录&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%9b%e5%bb%baredis%e7%94%a8%e6%88%b7%e5%b9%b6%e8%ae%be%e7%bd%ae%e5%b7%a5%e4%bd%9c%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 创建 redis 用户 设置为不可登陆系统 并设置用户的主目录为/DATA/redis/data&#xD;&#xA;sudo useradd -r -s /sbin/nologin -d /DATA/redis/data redis&#xD;&#xA;# 指定 redis 用户的主目录为/DATA/redis/data&#xD;&#xA;sudo usermod -d /DATA/redis/data redis&#xD;&#xA;# 递归地将/DATA/redis/data目录及其所有子目录和文件的所有者和所属组设置为redis用户和redis组&#xD;&#xA;sudo chown -R redis:redis /DATA/redis/data&#xD;&#xA;# 递归地将/DATA/redis/data目录及其子目录设和文件的权限设置为755&#xD;&#xA;# 755：所有者有读写和执行权限，组用户和其他用户有读和执行权限&#xD;&#xA;sudo chmod -R 755 /DATA/redis/data&#xD;&#xA;# 查找/etc/passwd文件中包含mysql的行 /etc/passwd是系统用户信息文件，包含所有用户的基本信息&#xD;&#xA;grep redis /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;主节点配置&#34;&gt;&#xD;&#xA;  主节点配置&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e8%8a%82%e7%82%b9%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;redisconf&#34;&gt;&#xD;&#xA;  redis.conf&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redisconf&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vim /DATA/redis/config/redis.conf&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# 监听端口&#xD;&#xA;port 63790&#xD;&#xA;# 访问密码&#xD;&#xA;requirepass password&#xD;&#xA;# 数据库数量 使用cluster模式时只会有一个database即DB0&#xD;&#xA;databases 16&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# 绑定本机的网络接口（网卡） 绑定的是网卡的IP地址&#xD;&#xA;# 0.0.0.0 监听所有 默认127.0.0.1&#xD;&#xA;bind 0.0.0.0&#xD;&#xA;&#xD;&#xA;# 默认开启&#xD;&#xA;# 如果没有设置密码和且没有设置bind，只允许本机访问&#xD;&#xA;protected-mode yes&#xD;&#xA;&#xD;&#xA;# 单位秒，timeout时间内客户端没有数据交互，关闭连接&#xD;&#xA;timeout 60&#xD;&#xA;&#xD;&#xA;# 客户端同时连接的最大数量 默认10000&#xD;&#xA;# 达到最大值时关闭新连接并返回max number of clients reached&#xD;&#xA;maxclients 1000&#xD;&#xA;&#xD;&#xA;# 内存管理 &#xD;&#xA;# 最大内存，推荐最大设置为6GB&#xD;&#xA;# 不要设置过大内存，防止执行RDB内存快照文件或者AOF重写时因为数据太大阻塞太长时间&#xD;&#xA;maxmemory 2GB&#xD;&#xA;&#xD;&#xA;# 内存淘汰策略 默认noeviction&#xD;&#xA;# noeviction -&amp;gt; 不删除任何 key，内存满了直接返回报错&#xD;&#xA;# 默认情况下slave节点会忽略maxmemory配置，除非被提升为master&#xD;&#xA;# 只有master会执行内存淘汰策略，master删除key后会发送DEL指令给slave&#xD;&#xA;maxmemory-policy noeviction&#xD;&#xA;&#xD;&#xA;# 过期key滞留在内存的比例 默认值为1 表示10%&#xD;&#xA;# 设置的越小，一次淘汰周期需要消耗的CPU更多 需要删除更多的过期数据&#xD;&#xA;active-expire-effort 1&#xD;&#xA;&#xD;&#xA;# 持久化&#xD;&#xA;# AOF持久化开启&#xD;&#xA;appendonly yes&#xD;&#xA;&#xD;&#xA;# AOF 持久化模式，默认为 &amp;#34;always&amp;#34;。可以是 always、everysec 或 no&#xD;&#xA;# always：每个写操作都立即同步到磁盘，最费性能&#xD;&#xA;# everysec：每秒钟同步一次到磁盘，折中的选择&#xD;&#xA;# no：完全依赖操作系统的行为，可能会丢失数据，但性能最高&#xD;&#xA;appendfsync everysec&#xD;&#xA;&#xD;&#xA;# AOF-RDB混合持久化&#xD;&#xA;# 配置成yes必须先开启AOF AOF重写生成的文件将同时包含RDB和AOF格式内容&#xD;&#xA;# 推荐开启&#xD;&#xA;aof-use-rdb-preamble yes&#xD;&#xA;&#xD;&#xA;# 性能监控&#xD;&#xA;# 慢查询日志 执行时间只是命令阶段的时间，不包括建立连接发送回复等&#xD;&#xA;# slow log 仅保存在内存中，效率很高&#xD;&#xA;# 执行时间大于多少微秒的查询进行记录 1s = 1,000,000微秒 默认10000&#xD;&#xA;slowlog-log-slower-than 10000&#xD;&#xA;&#xD;&#xA;# 最多保存多少条慢查询日志 slowlog本身是FIFO 默认128&#xD;&#xA;slowlog-max-len 128&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sentinelconf&#34;&gt;&#xD;&#xA;  sentinel.conf&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sentinelconf&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vim /DATA/redis/config/sentinel/sentinel.conf&#xD;&#xA;&#xD;&#xA;# 哨兵端口&#xD;&#xA;port 26379&#xD;&#xA;&#xD;&#xA;# 监控的redis主节点的ip port&#xD;&#xA;# master-name 自定义&#xD;&#xA;# quorum 多少个sentinel主观认为master失联，认为客观上master失联&#xD;&#xA;# sentinel monitor &amp;lt;master-name&amp;gt; &amp;lt;ip&amp;gt; &amp;lt;redis-port&amp;gt; &amp;lt;quorum&amp;gt;&#xD;&#xA;sentinel monitor mymaster 192.168.1.11 63790 2&#xD;&#xA;&#xD;&#xA;# redis实例的密码 主从的访问密码必须要一样&#xD;&#xA;sentinel auth-pass mymaster password&#xD;&#xA;&#xD;&#xA;# 指定多少毫秒之后主节点没有应答哨兵&#xD;&#xA;# 此时哨兵主观上认为主节点下线&#xD;&#xA;# 默认30秒&#xD;&#xA;# sentinel down-after-milliseconds &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt;&#xD;&#xA;sentinel down-after-milliseconds mymaster 30000&#xD;&#xA;&#xD;&#xA;# 设置故障转移时，从节点同步新主节点数据的并发数量&#xD;&#xA;# 值越小，对主节点的压力越小，但同步速度可能较慢&#xD;&#xA;# sentinel parallel-syncs &amp;lt;master-name&amp;gt; &amp;lt;numslaves&amp;gt;&#xD;&#xA;sentinel parallel-syncs mymaster 1&#xD;&#xA;&#xD;&#xA;# 设置故障转移的超时时间（单位：毫秒）&#xD;&#xA;# 如果故障转移在这个时间内没有完成，则认为失败&#xD;&#xA;sentinel failover-timeout mymaster 180000&#xD;&#xA;&#xD;&#xA;# 配置哨兵自身的ip 避免走自动检测给出其他哨兵访问不到的地址&#xD;&#xA;sentinel announce-ip 192.168.1.11&#xD;&#xA;sentinel announce-port 36379&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;docker-composeyml&#34;&gt;&#xD;&#xA;  docker-compose.yml&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-composeyml&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vim /DATA/docker-compose.yml&#xD;&#xA;&#xD;&#xA;version: &amp;#39;3&amp;#39;  # 使用docker-compose版本3&#xD;&#xA;services:  # 定义服务&#xD;&#xA;    redis7:&#xD;&#xA;      image: redis:7.0.4&#xD;&#xA;      container_name: redis7&#xD;&#xA;      user: &amp;#34;996:986&amp;#34;&#xD;&#xA;      restart: always&#xD;&#xA;      ports:&#xD;&#xA;        - 63790:63790&#xD;&#xA;      environment:&#xD;&#xA;        TZ: &amp;#34;Asia/Shanghai&amp;#34;&#xD;&#xA;      volumes:&#xD;&#xA;        - /DATA/redis/config/redis.conf:/etc/redis/redis.conf&#xD;&#xA;        - /DATA/redis/data:/data&#xD;&#xA;      command: [&amp;#34;redis-server&amp;#34;, &amp;#34;/etc/redis/redis.conf&amp;#34;]&#xD;&#xA;    sentinel:&#xD;&#xA;      image: redis:7.0.4&#xD;&#xA;      container_name: sentinel&#xD;&#xA;      restart: always&#xD;&#xA;      ports:&#xD;&#xA;        - 36379:26379&#xD;&#xA;      volumes:&#xD;&#xA;        - /DATA/redis/config/sentinel:/etc/redis/config/sentinel&#xD;&#xA;      environment:&#xD;&#xA;        TZ: &amp;#34;Asia/Shanghai&amp;#34;&#xD;&#xA;      command: [&amp;#34;redis-sentinel&amp;#34;, &amp;#34;/etc/redis/config/sentinel/sentinel.conf&amp;#34;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;docker-composeyml语法验证&#34;&gt;&#xD;&#xA;  docker-compose.yml语法验证&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-composeyml%e8%af%ad%e6%b3%95%e9%aa%8c%e8%af%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker-compose config&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;子节点配置&#34;&gt;&#xD;&#xA;  子节点配置&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%90%e8%8a%82%e7%82%b9%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;redisconf-1&#34;&gt;&#xD;&#xA;  redis.conf&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redisconf-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vim /DATA/redis/config/redis.conf&#xD;&#xA;&#xD;&#xA;# 监听端口 sentinel不知道外面映射啥端口，只好把内外端口设置一样&#xD;&#xA;port 63790&#xD;&#xA;# 访问密码&#xD;&#xA;requirepass password&#xD;&#xA;# 数据库数量 使用cluster模式时只会有一个database即DB0&#xD;&#xA;databases 16&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# 绑定本机的网络接口（网卡） 绑定的是网卡的IP地址&#xD;&#xA;# 0.0.0.0 监听所有 默认127.0.0.1&#xD;&#xA;bind 0.0.0.0&#xD;&#xA;&#xD;&#xA;# 默认开启&#xD;&#xA;# 如果没有设置密码和且没有设置bind，只允许本机访问&#xD;&#xA;protected-mode yes&#xD;&#xA;&#xD;&#xA;# 单位秒，timeout时间内客户端没有数据交互，关闭连接&#xD;&#xA;timeout 60&#xD;&#xA;&#xD;&#xA;# 客户端同时连接的最大数量 默认10000&#xD;&#xA;# 达到最大值时关闭新连接并返回max number of clients reached&#xD;&#xA;maxclients 1000&#xD;&#xA;&#xD;&#xA;# 内存管理 &#xD;&#xA;# 最大内存，推荐最大设置为6GB&#xD;&#xA;# 不要设置过大内存，防止执行RDB内存快照文件或者AOF重写时因为数据太大阻塞太长时间&#xD;&#xA;maxmemory 2GB&#xD;&#xA;&#xD;&#xA;# 内存淘汰策略 默认noeviction&#xD;&#xA;# noeviction -&amp;gt; 不删除任何 key，内存满了直接返回报错&#xD;&#xA;# 默认情况下slave节点会忽略maxmemory配置，除非被提升为master&#xD;&#xA;# 只有master会执行内存淘汰策略，master删除key后会发送DEL指令给slave&#xD;&#xA;maxmemory-policy noeviction&#xD;&#xA;&#xD;&#xA;# 过期key滞留在内存的比例 默认值为1 表示10%&#xD;&#xA;# 设置的越小，一次淘汰周期需要消耗的CPU更多 需要删除更多的过期数据&#xD;&#xA;active-expire-effort 1&#xD;&#xA;&#xD;&#xA;# 持久化&#xD;&#xA;# AOF持久化开启&#xD;&#xA;appendonly yes&#xD;&#xA;&#xD;&#xA;# AOF 持久化模式，默认为 &amp;#34;always&amp;#34;。可以是 always、everysec 或 no&#xD;&#xA;# always：每个写操作都立即同步到磁盘，最费性能&#xD;&#xA;# everysec：每秒钟同步一次到磁盘，折中的选择&#xD;&#xA;# no：完全依赖操作系统的行为，可能会丢失数据，但性能最高&#xD;&#xA;appendfsync everysec&#xD;&#xA;&#xD;&#xA;# AOF-RDB混合持久化&#xD;&#xA;# 配置成yes必须先开启AOF AOF重写生成的文件将同时包含RDB和AOF格式内容&#xD;&#xA;# 推荐开启&#xD;&#xA;aof-use-rdb-preamble yes&#xD;&#xA;&#xD;&#xA;# 性能监控&#xD;&#xA;# 慢查询日志 执行时间只是命令阶段的时间，不包括建立连接发送回复等&#xD;&#xA;# slow log 仅保存在内存中，效率很高&#xD;&#xA;# 执行时间大于多少微秒的查询进行记录 1s = 1,000,000微秒 默认10000&#xD;&#xA;slowlog-log-slower-than 10000&#xD;&#xA;&#xD;&#xA;# 最多保存多少条慢查询日志 slowlog本身是FIFO 默认128&#xD;&#xA;slowlog-max-len 128&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# 主从复制&#xD;&#xA;# replicaof &amp;lt;masterip&amp;gt; &amp;lt;masterport&amp;gt;将当前实例成为master的从节点&#xD;&#xA;replicaof 192.168.1.11 63790&#xD;&#xA;&#xD;&#xA;# master节点的requiepass&#xD;&#xA;masterauth bucunzaide82838161&#xD;&#xA;&#xD;&#xA;# 从节点只读，默认为yes，建议保留默认配置&#xD;&#xA;replica-read-only yes&#xD;&#xA;&#xD;&#xA;# slave每10s Ping一次master&#xD;&#xA;repl-ping-replica-period 10&#xD;&#xA;&#xD;&#xA;# slave与master之间的复制超时时间，默认60s&#xD;&#xA;repl-timeout 60&#xD;&#xA;&#xD;&#xA;# slave优先级 哨兵使用 默认100&#xD;&#xA;# master节点挂掉，哨兵选择priority最小的slave节点作为新的master&#xD;&#xA;replica-priority 100&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sentinelconf-1&#34;&gt;&#xD;&#xA;  sentinel.conf&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sentinelconf-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo scp -P 2222 quanta@192.168.1.11:/DATA/redis/config/sentinel.conf /DATA/redis/config/sentinel.conf&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改配置sentinel ip&lt;/p&gt;</description>
    </item>
    <item>
      <title>ElasticSearch</title>
      <link>https://constructor-md.github.io/codestack/docs/deploy/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://constructor-md.github.io/codestack/docs/deploy/elasticsearch/</guid>
      <description>&lt;h1 id=&#34;elasticsearch&#34;&gt;&#xD;&#xA;  ElasticSearch&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#elasticsearch&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;安装版本：8.15.0&lt;/p&gt;&#xA;&lt;p&gt;部署方式：三节点&lt;/p&gt;&#xA;&lt;p&gt;运行方式：docker-compose&lt;/p&gt;&#xA;&lt;h2 id=&#34;linux系统设置&#34;&gt;&#xD;&#xA;  Linux系统设置&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux%e7%b3%bb%e7%bb%9f%e8%ae%be%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 修改内核参数&#xD;&#xA;# 设置每个进程最多拥有的最大内存映射区域数量 默认65536对ES来说不足&#xD;&#xA;echo &amp;#34;vm.max_map_count=262144&amp;#34; | sudo tee -a /etc/sysctl.conf&#xD;&#xA;sudo sysctl -p&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建目录&#34;&gt;&#xD;&#xA;  创建目录&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%9b%e5%bb%ba%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkdir /DATA/es /DATA/es/data /DATA/es/logs /DATA/es/plugins /DATA/es/config&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;权限设置&#34;&gt;&#xD;&#xA;  权限设置&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e9%99%90%e8%ae%be%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo chmod -R 777 /DATA/es/data /DATA/es/logs /DATA/es/plugins /DATA/es/config&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;各单节点启动获取官方配置&#34;&gt;&#xD;&#xA;  各单节点启动获取官方配置&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%84%e5%8d%95%e8%8a%82%e7%82%b9%e5%90%af%e5%8a%a8%e8%8e%b7%e5%8f%96%e5%ae%98%e6%96%b9%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vim /DATA/docker-compose.yml&#xD;&#xA;&#xD;&#xA;version: &amp;#39;3&amp;#39;&#xD;&#xA;services:&#xD;&#xA;  es:&#xD;&#xA;      image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0&#xD;&#xA;      container_name: es&#xD;&#xA;      restart: always&#xD;&#xA;      environment:&#xD;&#xA;        - &amp;#34;ES_JAVA_OPTS=-Xms4g -Xmx4g&amp;#34; # 宿主机最大内存的一半 再留点给其他应用&#xD;&#xA;        - &amp;#34;ELASTIC_PASSWORD=bucunzaide2333&amp;#34;&#xD;&#xA;        - &amp;#34;TZ=Asia/Shanghai&amp;#34;&#xD;&#xA;      ports:&#xD;&#xA;        - &amp;#34;19200:19200&amp;#34;&#xD;&#xA;        - &amp;#34;19300:19300&amp;#34;&#xD;&#xA;      volumes:&#xD;&#xA;        - /DATA/es/data:/usr/share/elasticsearch/data&#xD;&#xA;        - /DATA/es/logs:/usr/share/elasticsearch/logs&#xD;&#xA;        - /etc/hosts:/etc/hosts&#xD;&#xA;        - es_config:/usr/share/elasticsearch/config&#xD;&#xA;        - /DATA/es/plugins:/usr/share/elasticsearch/plugins&#xD;&#xA;      ulimits:&#xD;&#xA;        # mmap 映射内存不限制&#xD;&#xA;        memlock:&#xD;&#xA;          soft: -1                  &#xD;&#xA;          hard: -1&#xD;&#xA;        # 文件描述符打开个数修改    &#xD;&#xA;        nofile:                                          &#xD;&#xA;          soft: 65535                             &#xD;&#xA;          hard: 65535&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# 末尾添加 作用是不要让宿主机空目录覆盖&#xD;&#xA;volumes:&#xD;&#xA;      es_config:&#xD;&#xA;        driver: local&#xD;&#xA;        driver_opts:&#xD;&#xA;          type: none&#xD;&#xA;          device: /DATA/es/config&#xD;&#xA;          o: bind&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;#mmap 映射内存不限制&lt;/p&gt;</description>
    </item>
    <item>
      <title>MinIO</title>
      <link>https://constructor-md.github.io/codestack/docs/deploy/minio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://constructor-md.github.io/codestack/docs/deploy/minio/</guid>
      <description>&lt;h1 id=&#34;minio&#34;&gt;&#xD;&#xA;  MinIO&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#minio&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;部署方式：单节点&lt;/p&gt;&#xA;&lt;p&gt;运行方式：docker-compose&lt;/p&gt;&#xA;&lt;h2 id=&#34;目录创建&#34;&gt;&#xD;&#xA;  目录创建&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%ae%e5%bd%95%e5%88%9b%e5%bb%ba&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkdir /DATA/minio /DATA/minio/data /DATA/minio/config&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker-composeyml&#34;&gt;&#xD;&#xA;  docker-compose.yml&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-composeyml&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vim /DATA/docker-compose.yml&#xD;&#xA;&#xD;&#xA;services:&#xD;&#xA;  minio:&#xD;&#xA;    image: minio/minio&#xD;&#xA;    restart: always&#xD;&#xA;    mem_limit: 1G&#xD;&#xA;    ports:&#xD;&#xA;      - &amp;#34;9000:9000&amp;#34;&#xD;&#xA;      - &amp;#34;19001:9001&amp;#34;&#xD;&#xA;    container_name: minio&#xD;&#xA;    command: server /data --console-address &amp;#34;:9001&amp;#34;&#xD;&#xA;    environment:&#xD;&#xA;      - MINIO_ROOT_USER=admin&#xD;&#xA;      - MINIO_ROOT_PASSWORD=_admin123&#xD;&#xA;      - MINIO_BROWSER_DEFAULT_LOCALE=zh_CN&#xD;&#xA;    volumes:&#xD;&#xA;      - /DATA/minio/data:/data&#xD;&#xA;      - /DATA/minio/config:/root/.minio&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;9000 是MInIO S3 API端口&#xA;9001 是MinIO WebUI 控制台端口&#xA;需要的节点才映射出来即可&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;启动&#34;&gt;&#xD;&#xA;  启动&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%90%af%e5%8a%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo docker-compose up -d minio&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;防火墙打开&#34;&gt;&#xD;&#xA;  防火墙打开&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%b2%e7%81%ab%e5%a2%99%e6%89%93%e5%bc%80&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo ufw allow 19001/tcp&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
